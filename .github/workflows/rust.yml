name: RustDesk CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg  # 关键修复点
  RUSTFLAGS: "-C target-cpu=native"

jobs:
  build-windows:
    name: Build Windows Release
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # 修复1：安装vcpkg并配置环境
      - name: Setup vcpkg
        shell: powershell
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          echo "${{ github.workspace }}/vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 修复2：安装Windows SDK和必要组件
      - name: Install dependencies
        run: |
          choco install -y windows-sdk-10.1
          choco install -y llvm  # magnum-opus可能需要LLVM

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          components: rust-src  # 部分音频处理依赖需要源码

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            vcpkg/installed  # 缓存vcpkg编译结果
          key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      # 修复3：显式设置vcpkg工具链
      - name: Configure vcpkg
        run: |
          echo "VCPKG_ROOT=$VCPKG_ROOT" >> $GITHUB_ENV
          echo "$VCPKG_ROOT/installed/x64-windows/bin" >> $GITHUB_PATH

      - name: Build agent
        working-directory: ./agent_src
        env:
          VCPKGRS_DYNAMIC: 1  # 强制动态链接
        run: |
          cargo build --release --target ${{ matrix.target }} --features "default"
          if [ -f "./target/${{ matrix.target }}/release/rustdesk.exe" ]; then
            strip ./target/${{ matrix.target }}/release/rustdesk.exe || true
          fi

      - name: Package artifacts
        run: |
          mkdir -p release
          cp ./agent_src/target/${{ matrix.target }}/release/rustdesk.exe ./release/agent.exe
          cp -r ./images ./release/
          7z a -tzip rustdesk-lite-${{ github.run_number }}.zip ./release/*

      - uses: actions/upload-artifact@v4
        with:
          name: rustdesk-windows-${{ matrix.target }}
          path: rustdesk-lite-${{ github.run_number }}.zip
